# Pre-commit configuration for Harness Terraform modules
# This file standardizes code quality checks across all Terraform projects
# See https://pre-commit.com for more information
repos:
  # Built-in pre-commit hooks for basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
        description: Trims trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
        description: Makes sure files end in a newline and only a newline
      - id: check-yaml
        name: Check YAML syntax
        description: Attempts to load all yaml files to verify syntax
        exclude: |
          (?x)^(
            .*\.template\.yaml$|
            templates/.*\.yaml$
          )$
      - id: check-json
        name: Check JSON syntax
        description: Attempts to load all json files to verify syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Check for files that contain merge conflict strings
      - id: check-added-large-files
        name: Check for large files
        description: Prevent giant files from being committed
        args: ["--maxkb=1000"]
      - id: mixed-line-ending
        name: Mixed line ending
        description: Replaces or checks mixed line endings
        args: ["--fix=lf"]
      - id: check-case-conflict
        name: Check for case conflicts
        description: Check for files that would conflict in case-insensitive filesystems
  # Terraform-specific hooks
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.92.0
    hooks:
      - id: terraform_fmt
        name: Terraform format
        description: Rewrites all Terraform configuration files to a canonical format
        exclude: |
          (?x)^(
            .*\.template\.tf$|
            templates/.*|
            .*\.terraform/.*|
            .*/\.terraform/.*|
            .*\.terraform\.lock\.hcl$|
            .*\.tfstate$|
            .*\.tfstate\.backup$
          )$
      - id: terraform_validate
        name: Terraform validate
        description: Validates all Terraform configuration files
        exclude: |
          (?x)^(
            .*\.template\.tf$|
            templates/.*|
            .*\.terraform/.*|
            .*/\.terraform/.*|
            .*\.terraform\.lock\.hcl$|
            .*\.tfstate$|
            .*\.tfstate\.backup$
          )$
        args:
          - --hook-config=--retry-once-with-cleanup=true
          - --hook-config=--tf-init-args=-upgrade
      - id: terraform_docs
        name: Terraform docs
        description: Inserts input and output documentation into README.md
        exclude: |
          (?x)^(
            .*\.template\.tf$|
            templates/.*|
            .*\.terraform/.*|
            .*/\.terraform/.*|
            .*\.terraform\.lock\.hcl$|
            .*\.tfstate$|
            .*\.tfstate\.backup$
          )$
        args:
          - --hook-config=--path-to-file=OPENTOFU.md
          - --hook-config=--add-to-existing-file=true
          - --hook-config=--create-file-if-not-exist=true
      - id: terraform_tflint
        name: Terraform lint (tflint)
        description: Validates all Terraform configuration files with TFLint
        exclude: |
          (?x)^(
            .*\.template\.tf$|
            templates/.*|
            .*\.terraform/.*|
            .*/\.terraform/.*|
            .*\.terraform\.lock\.hcl$|
            .*\.tfstate$|
            .*\.tfstate\.backup$
          )$
        args:
          - --hook-config=--args=--config=__GIT_WORKING_DIR__/.tflint.hcl
      - id: terraform_trivy
        name: Terraform security scan (trivy)
        description: Static analysis security scanner for Terraform code (replaces tfsec)
        exclude: |
          (?x)^(
            .*\.template\.tf$|
            templates/.*|
            .*\.terraform/.*|
            .*/\.terraform/.*|
            .*\.terraform\.lock\.hcl$|
            .*\.tfstate$|
            .*\.tfstate\.backup$
          )$
        args:
          - --hook-config=--args=--severity MEDIUM,HIGH,CRITICAL
      - id: terraform_checkov
        name: Terraform security scan (checkov)
        description: Runs checkov on Terraform files
        exclude: |
          (?x)^(
            .*\.template\.tf$|
            templates/.*|
            .*\.terraform/.*|
            .*/\.terraform/.*|
            .*\.terraform\.lock\.hcl$|
            .*\.tfstate$|
            .*\.tfstate\.backup$
          )$
        args:
          - --hook-config=--args=--framework terraform --skip-check CKV_AWS_79,CKV2_AWS_5,CKV_TF_2
  # YAML formatting
  - repo: local
    hooks:
      - id: yamlfmt
        name: Format YAML files
        description: Format YAML files with yamlfmt
        entry: yamlfmt
        language: system
        files: \.ya?ml$
        exclude: |
          (?x)^(
            .*\.template\.yaml$|
            templates/.*\.yaml$|
            .*\.tfstate$|
            .*\.tfstate\.backup$
          )$
  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: Shell script lint
        description: Shell script analysis tool
        args: [--severity=warning]
  # Security scanning for secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        description: Detects high entropy strings that are likely to be passwords
        args: ["--baseline", ".secrets.baseline"]
        exclude: |
          (?x)^(
            .*\.tfstate$|
            .*\.tfstate\.backup$|
            .*\.terraform/.*|
            .*/\.terraform/.*
          )$
  # Additional checks for specific file types
  - repo: local
    hooks:
      - id: terraform-wrapper-module-for-each
        name: Terraform wrapper module check
        description: Ensure wrapper modules use for_each instead of count for iteration
        entry: |
          bash -c '
            # Look for problematic count usage patterns (but allow conditional count)
            problematic_files=""
            for tf_file in $(find . -name "*.tf" -not -path "./.terraform/*" -not -name "*.template.tf" -not -path "./templates/*"); do
              # Check for count with numbers/variables that suggest iteration (not conditional)
              # Exclude commented lines and only check actual code
              if grep -v "^\s*#" "$tf_file" | grep -E "count\s*=\s*[0-9]+" > /dev/null || \
                 grep -v "^\s*#" "$tf_file" | grep -E "count\s*=\s*(var\.|local\.).*(count|length|size)" > /dev/null; then
                problematic_files="$problematic_files $tf_file"
              fi
            done
            if [ -n "$problematic_files" ]; then
              echo "ERROR: Found problematic count usage for iteration. Use for_each instead:"
              echo "$problematic_files"
              echo "Note: Conditional count (count = condition ? 1 : 0) is allowed."
              exit 1
            fi
          '
        language: system
        files: \.tf$
        pass_filenames: false
      - id: terraform-required-providers
        name: Terraform required providers check
        description: Ensure all Terraform files specify required providers
        entry: |
          bash -c '
            for tf_file in $(find . -name "*.tf" -not -path "./.terraform/*"); do
              if grep -q "resource\|data" "$tf_file" && ! grep -q "required_providers" "$tf_file"; then
                if ! find . -name "versions.tf" -o -name "providers.tf" | grep -q .; then
                  echo "WARNING: $tf_file uses resources but required_providers not found. Consider adding versions.tf"
                fi
              fi
            done
          '
        language: system
        files: \.tf$
        pass_filenames: false
# Global configuration
default_language_version:
  python: python3
# Global settings
fail_fast: false # Continue running hooks even if one fails
minimum_pre_commit_version: "3.0.0"
# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: []
  submodules: false
